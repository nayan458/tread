# backend docker file
FROM python:3.12

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

RUN pip install --upgrade pip

RUN pip install uv

WORKDIR /app

COPY requirements.txt /app/

# RUN curl -sSf https://rye.astral.sh/get | RYE_NO_AUTO_INSTALL=1 RYE_INSTALL_OPTION="--yes" bash
RUN PYTHONDONTWRITEBYTECODE=1 uv pip install --no-cache-dir --system -r requirements.txt
# RUN uv pip install --no-cache-dir -r requirements.txt

COPY . /app/

EXPOSE 8000

CMD [ "gunicorn", "app.wsgi" ]
# frontend docker file
# Base
ARG NODE_VERSION=22.13.1
FROM node:${NODE_VERSION}-alpine AS base

WORKDIR /app

# Build
FROM base AS build

COPY . .

RUN npm ci

RUN npm run build

# Production
FROM base AS final

ENV NODE_ENV production

RUN npm i -g serve

RUN chown -R node:node /app

# Run the application as a non-root user.
USER node

COPY --from=build /app/dist ./dist

EXPOSE 3000

CMD ["serve", "-s","dist"]

# compose.yaml file in the root directory

services:
  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: "test"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "nayan123"
    # ports:
    #   - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./treads-backend/backupfile.sql:/docker-entrypoint-initdb.d/backupfile.sql
    networks:
      - app-network

  backend:
    build: ./treads-backend
    # ports:
    #   - "8000:8000"
    depends_on:
      - db
    command: >
      bash -c "python manage.py makemigrations &&
               python manage.py migrate &&
               gunicorn app.wsgi:application --workers=3 --bind=0.0.0.0:8000 --timeout=60"
    volumes:
      - ./treads-backend:/app
    networks:
      - app-network

  frontend:
    build: 
      context: ./treads-frontend
    # ports:
    #   - "3000:3000"
    volumes:
      - ./treads-frontend:/app
    networks:
      - app-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    restart: always

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge

# nginx config file
server {
    listen 80;
    server_name localhost;  # Change to your domain name when deploying to production

    # Frontend
    location / {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Basic error handling
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}