# This file should be placed at /etc/nginx/nginx.conf
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # Define rate limiting zone here (in http context)
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    include /etc/nginx/conf.d/*.conf;
}

# This file should be placed at /etc/nginx/conf.d/default.conf
server {
  listen 80;
  server_name localhost;  # Change to your domain name when deploying to production

  # Frontend
  location / {
      proxy_pass http://frontend:3000;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      # Adding some useful headers for websockets if needed
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
  }

  # Backend API requests
  location /api/ {
      proxy_pass http://backend:8000/api/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      
      # Only allow requests from your frontend
      # proxy_set_header Origin http://frontend:3000;
      
      # Optional: Add some basic rate limiting
      limit_req zone=api burst=20 nodelay;
  }

  # Admin panel access (if needed)
  location /admin/ {
      proxy_pass http://backend:8000/admin/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
  }

  # Static files handling (if any)
  location /static/ {
      proxy_pass http://backend:8000/static/;
  }

  # Media files handling (if any)
  location /media/ {
      proxy_pass http://backend:8000/media/;
  }

  # Basic error handling
  error_page 404 /404.html;
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
      root /usr/share/nginx/html;
  }
}


# this is the react application calling the backend api
// src/api/axios.js
import axios from 'axios';

const baseURL = '/api/';

const axiosInstance = axios.create({
  baseURL,
  withCredentials: true, // Required for sending cookies
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add CSRF token to headers
axiosInstance.interceptors.request.use(
  async (config) => {
    // Only add CSRF token for non-GET requests
    if (config.method !== 'get') {
      // Get CSRF token from cookie
      const csrfToken = document.cookie
        .split('; ')
        .find((row) => row.startsWith('csrftoken='))
        ?.split('=')[1];

      if (csrfToken) {
        config.headers['X-CSRFToken'] = csrfToken;
      } else {
        // If no CSRF token exists, fetch it from the backend
        try {
          const response = await axios.get(`${baseURL}/get-csrf-token/`, {
            withCredentials: true,
          });
          config.headers['X-CSRFToken'] = response.data.csrf_token;
        } catch (error) {
          console.error('Error fetching CSRF token:', error);
        }
      }
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default axiosInstance;